{"version":3,"sources":["components/todos.js","components/nav.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","todos","type","id","length","text","value","completed","localStorage","setItem","JSON","stringify","filter","item","payload","map","removeItem","TodosList","items","key","TodoItem","dispatch","useContext","className","style","textDecoration","onClick","Todos","props","inputRef","useRef","useReducer","useEffect","current","focus","console","log","getItem","parse","todo","Provider","src","alt","ref","onKeyPress","event","Nav","to","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6526ed0.chunk.js","sourcesContent":["import React, { useReducer, useContext, useRef, useEffect } from 'react';\n\nconst Context = React.createContext();\n// reducer\nconst reducer = (state, action) => {\n  let todos;\n  switch (action.type){\n    case 'add':\n      // localStorage.setItem('todos', [...state, { id: state.length + 1, text: action.value, completed: false}]);\n      todos = [...state, { id: state.length + 1, text: action.value, completed: false}]\n      localStorage.setItem('todos', JSON.stringify(todos));\n      return todos;\n    case 'delete':\n      todos = state.filter(item => item.id !== action.payload);\n      //localStorage.removeItem('todos', JSON.stringify(todos));\n      return todos\n    case 'completed':\n      return state.map(item => {\n        if (item.id === action.payload) item.completed = !item.completed;\n        todos = {...item};\n        localStorage.setItem('todos', JSON.stringify(todos));\n        return {...item}\n      })\n    case 'load':\n      return action.value;\n    case 'reset':\n      localStorage.removeItem(\"todos\");\n      return action.payload;\n    default:\n      return state;\n      //throw new Error();\n  }\n}\n\nconst Todos = props => {\n  const inputRef = useRef(); \n  const [state, dispatch] = useReducer(reducer, []);\n\n  useEffect((state) => {\n    inputRef.current.focus();\n    //localStorage.removeItem(\"todos\");\n    console.log(localStorage.getItem(\"todos\") ? JSON.parse(localStorage.getItem('todos')):{todo: []});\n    // let todos = localStorage.getItem(\"todos\") ? localStorage.getItem(\"todos\") : undefined;\n    // console.log(todos);\n    // dispatch({ type:'load', value: todos });\n  }, []);\n\n  return (\n    <Context.Provider value={dispatch}>\n      <div className=\"container bg-light shadow-light pb-4 mb-4\">\n        <div className=\"row justify-content-center\">\n          <div className=\"fit pb-4\">\n            <img src=\"https://picsum.photos/1140/280?random\" alt=\"\"></img><br></br>\n          </div>\n          <div className=\"col-md-6 text-center\">\n            <input className=\"form-control\" type=\"text\" ref={inputRef}\n                onKeyPress={event => {\n                  if (event.key === 'Enter') {\n                    dispatch({type:'add', value: inputRef.current.value });\n                    inputRef.current.value = \"\";\n                  }\n                }}\n            />\n          </div>\n          <div className=\"col-md-3\">\n            <button className=\"btn-light btn-circle\" \n              onClick={()=> {\n                dispatch({type:'add', value:inputRef.current.value});\n                inputRef.current.value = \"\";\n                inputRef.current.focus();\n              }}>&nbsp;+&nbsp;\n            </button>\n            <button className=\"btn btn-light\" \n              onClick={()=> dispatch({type:'reset', payload:[] })}>Reset\n            </button>\n            <br />\n            <br />\n          </div>\n        </div>\n        <TodosList items={state}/>\n      </div>\n    </Context.Provider>\n  )\n}\n\nconst TodosList = ({ items }) => {\n  return items.map(item => <TodoItem key={item.id} {...item}/>);\n}\n\nconst TodoItem = ({ id, completed, text}) => {\n  const dispatch = useContext(Context);\n\n  return(\n    <div className=\"row justify-content-center m-1\">  \n      <div className=\"col-md-6\" style={{textDecoration:completed ? 'line-through' : \"\"}} onClick={() => dispatch({type: 'completed', payload:id })}>&nbsp;{text}&nbsp;\n      </div>\n      <div className=\"col-md-2\">     \n        <button className=\"btn-danger btn-circle\" onClick={() => dispatch({type: 'delete', payload:id })}>&nbsp;x&nbsp;</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Todos;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Nav = () => {\n  return (\n<nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n  {/* <Link to=\"/\">\n    <p className=\"navbar-brand\">Home</p>\n  </Link>\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span className=\"navbar-toggler-icon\"></span>\n  </button> */}\n  <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n    <div className=\"navbar-nav\">\n      <Link to=\"/\">\n        <p className=\"nav-item nav-link\">Todos</p>\n      </Link>\n      {/* <Link to=\"/\">\n        <p className=\"nav-item nav-link\">Pricing</p>\n      </Link> */}\n    </div>\n  </div>\n</nav>\n  )\n}\n\nexport default Nav;\n","import React from 'react';\nimport './App.css';\nimport Todos from './components/todos';\nimport Nav from './components/nav';\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <Nav />\n      <Switch>\n        <Route path=\"/\" exact={true} component={Todos} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}