{"version":3,"sources":["components/api.js","components/todos.js","components/nav.js","App.js","serviceWorker.js","index.js"],"names":["Fetch","props","useState","url","buttonClick","setUrl","data","loading","state","setState","key","value","API","setAPI","useEffect","prevState","fetchData","endpoint","a","time","Date","now","fetch","response","json","finishTime","console","log","content","className","DropdownButton","id","variant","title","onSelect","eventKey","apiPath","APILists","requests","Object","keys","map","index","Dropdown","Item","type","onChange","e","target","onClick","src","theme","displayDataTypes","Context","React","createContext","reducer","action","todos","length","text","completed","localStorage","setItem","JSON","stringify","filter","item","payload","removeItem","TodosList","items","TodoItem","dispatch","useContext","style","textDecoration","Todos","inputRef","useRef","useReducer","current","focus","getItem","parse","todo","Provider","alt","ref","onKeyPress","event","Nav","to","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.54b1a0cf.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DropdownButton, Dropdown } from 'react-bootstrap';\nimport ReactJson from 'react-json-view'\nimport APILists from '../APILists.json';\nconst defaultUrl = \"http://mldev-api.twnextdigital.com/v1/1/ArticleDetail?mlArticleId=1_20191111002\";\nconst rootPath = \"http://mldev-api.twnextdigital.com\";\n\nconst Fetch = props => {\n  const [url, setUrl] = useState({ url: defaultUrl, buttonClick: false });\n  const [state, setState] = useState({ data: {}, loading: false});\n  const [API, setAPI] = useState({ key:\"\", value:\"\" })\n\n  //replace for componentDidUpdate\n  useEffect(() => {\n    if (!url || !url.url || url.buttonClick === false) return;\n\n    setState(prevState => {\n      return {...prevState, ...{loading: true}};\n    });\n\n    fetchData(url.url);\n\n  }, [url, setUrl]);\n\n  const fetchData = async (endpoint) => {\n    try {\n      const time = Date.now();\n      const response = await fetch(endpoint);\n      const data = await response.json();\n      const finishTime = Date.now();\n      console.log(finishTime - time);\n      //console.log(await data.content);\n      setState({ data: data.content, loading: false });\n    }\n    catch (err) {\n      console.log('fetch failed', err);\n    }\n\n    // return fetch(endpoint)\n    //   .then(response => response.json())\n    //   .then(data => {\n    //     setState({ data: data.content, loading: false });\n    //   })\n    //   .catch (err => {\n    //     console.log(err);\n    //   });\n  }\n\n  //fetch button click handle\n  const handleButtonClick = (e) => {\n    setUrl(prevState => {\n      return {...prevState, ...{buttonClick: true}};\n    });\n    //console.log(`${url.url}`);\n  }\n\n  //dropdown select change handle\n  const handleSelect = (eventKey) => {\n    const apiPath = APILists.requests[eventKey];\n    setAPI({key: eventKey, value: apiPath });\n    setUrl({url: rootPath + apiPath, buttonClick: false});\n  }\n\n  return (\n    <div className=\"container-fluid\">\n      {/* dropdown */} \n      <div className=\"row pt-3\">\n        <div className=\"col-md-12\">\n        <DropdownButton id=\"apiLists\" variant=\"primary\" title={API.key?API.key:\"API Lists\"} \n        onSelect={handleSelect} value={API.key}>\n           {Object.keys(APILists.requests).map((key, index) => \n           <Dropdown.Item eventKey={key} key={index} value={key}>{key}</Dropdown.Item>)}\n        </DropdownButton>\n        </div>\n      </div>\n      {/* input */}\n      <div className=\"row mt-3\">\n        <div className=\"col-md-9\">\n          <input type=\"text\" className=\"form-control\" value={ url ? url.url : ''}//defaultValue={defaultUrl}\n            onChange={e => setUrl({url: e.target.value, buttonClick: false})}>\n            </input>\n        </div>\n        {/* button */}\n        <div className=\"col-md-3\">\n          <button className=\"btn btn-primary\" onClick={handleButtonClick}>Fetch</button>      \n        </div>\n      </div>\n      {/* result */}\n      <div className=\"row mt-3\">\n        <div className=\"col-md-12\">\n          {/* <code><pre>\n            <p className=\"text-light font-larger\">\n            {state.loading ? '...loading' : state.data}\n            </p> \n          </pre></code> */}\n          { state.loading ? '...loading': <ReactJson src={state.data} theme=\"monokai\" displayDataTypes={false}/> }\n        </div>\n        </div>\n      </div>\n  )\n}\n\nexport default Fetch;","import React, { useReducer, useContext, useRef, useEffect } from 'react';\n\nconst Context = React.createContext();\n// reducer\nconst reducer = (state, action) => {\n  let todos;\n  switch (action.type){\n    case 'add':\n      // localStorage.setItem('todos', [...state, { id: state.length + 1, text: action.value, completed: false}]);\n      todos = [...state, { id: state.length + 1, text: action.value, completed: false}]\n      localStorage.setItem('todos', JSON.stringify(todos));\n      return todos;\n    case 'delete':\n      todos = state.filter(item => item.id !== action.payload);\n      //localStorage.removeItem('todos', JSON.stringify(todos));\n      return todos\n    case 'completed':\n      return state.map(item => {\n        if (item.id === action.payload) item.completed = !item.completed;\n        todos = {...item};\n        localStorage.setItem('todos', JSON.stringify(todos));\n        return {...item}\n      })\n    case 'load':\n      return action.value;\n    case 'reset':\n      localStorage.removeItem(\"todos\");\n      return action.payload;\n    default:\n      return state;\n      //throw new Error();\n  }\n}\n\nconst Todos = props => {\n  const inputRef = useRef(); \n  const [state, dispatch] = useReducer(reducer, []);\n\n  useEffect((state) => {\n    inputRef.current.focus();\n    //localStorage.removeItem(\"todos\");\n    console.log(localStorage.getItem(\"todos\") ? JSON.parse(localStorage.getItem('todos')):{todo: []});\n    // let todos = localStorage.getItem(\"todos\") ? localStorage.getItem(\"todos\") : undefined;\n    // console.log(todos);\n    // dispatch({ type:'load', value: todos });\n  }, []);\n\n  return (\n    <Context.Provider value={dispatch}>\n      <div className=\"container bg-light shadow-light pb-4 mb-4\">\n        <div className=\"row justify-content-center\">\n          <div className=\"fit pb-4\">\n            <img src=\"https://picsum.photos/1140/280?random\" alt=\"\"></img><br></br>\n          </div>\n          <div className=\"col-md-6 text-center\">\n            <input className=\"form-control\" type=\"text\" ref={inputRef}\n                onKeyPress={event => {\n                  if (event.key === 'Enter') {\n                    dispatch({type:'add', value: inputRef.current.value });\n                    inputRef.current.value = \"\";\n                  }\n                }}\n            />\n          </div>\n          <div className=\"col-md-3\">\n            <button className=\"btn btn-light\" \n              onClick={()=> dispatch({type:'reset', payload:[] })}>Reset\n            </button>\n            <br />\n            <br />\n          </div>\n        </div>\n        <TodosList items={state}/>\n      </div>\n    </Context.Provider>\n  )\n}\n\nconst TodosList = ({ items }) => {\n  return items.map(item => <TodoItem key={item.id} {...item}/>);\n}\n\nconst TodoItem = ({ id, completed, text}) => {\n  const dispatch = useContext(Context);\n\n  return(\n    <div className=\"row justify-content-center m-1\">  \n      <div className=\"col-md-6\" style={{textDecoration:completed ? 'line-through' : \"\"}} onClick={() => dispatch({type: 'completed', payload:id })}>&nbsp;{text}&nbsp;\n      </div>\n      <div className=\"col-md-2\">     \n        <button className=\"btn-danger btn-circle\" onClick={() => dispatch({type: 'delete', payload:id })}>&nbsp;x&nbsp;</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Todos;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Nav = () => {\n  return (\n<nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n  {/* <Link to=\"/\">\n    <p className=\"navbar-brand\">Home</p>\n  </Link>\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span className=\"navbar-toggler-icon\"></span>\n  </button> */}\n  <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n    <div className=\"navbar-nav\">\n      <Link to=\"/API\">\n        <p className=\"nav-item nav-link active\">API Lists<span className=\"sr-only\">(current)</span></p>\n      </Link>\n      <Link to=\"/todos\">\n        <p className=\"nav-item nav-link\">Todos</p>\n      </Link>\n      <Link to=\"/\">\n        <p className=\"nav-item nav-link\">Pricing</p>\n      </Link>\n    </div>\n  </div>\n</nav>\n  )\n}\n\nexport default Nav;\n","import React from 'react';\nimport './App.css';\nimport API from './components/api';\nimport Todos from './components/todos';\nimport Nav from './components/nav';\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <Nav />\n      <Switch>\n        <Route path=\"/\" exact component={API} />\n        <Route path=\"/api\" exact component={API} />\n        <Route path=\"/todos\" exact component={Todos} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}